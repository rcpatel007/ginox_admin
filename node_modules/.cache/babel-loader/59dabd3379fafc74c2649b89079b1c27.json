{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODE DATA\\\\diamond\\\\diamond_admin_frontend\\\\src\\\\pages\\\\Section\\\\Home.js\";\nimport React, { useState } from \"react\";\nimport { Row, Container, Col, Card, CardBody, FormGroup, Input } from \"reactstrap\";\nimport { constants as COLOR_CONST } from \"../../Constant/index\";\nimport { constants as ERROR_CONST } from \"../../Constant/Error&Success\";\nimport CustomButton from \"../../components/Custom/Button\";\nimport { Formik, Form } from \"formik\";\nimport { AddSectionSchema } from \"./AddSectionSchema\";\nimport { EditSectionAPI } from \"../../services/AuthService\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Spinner from \"../../components/Common/CustomLoader/loader\";\n\nconst Home = props => {\n  const section_type = props && props.location && props.location.state && props.location.state.section_type;\n  const dynamic_data = props && props.location && props.location.state && props.location.state.dynamic_data;\n  const section_id = props && props.location && props.location.state && props.location.state.section_id;\n  const [isLoading, setIsLoading] = useState(false);\n\n  const startLoading = () => {\n    setIsLoading(true);\n  };\n\n  const stopLoading = () => {\n    setIsLoading(false);\n  };\n\n  const handleSubmit = values => {\n    console.log(\"values=====handleSubmit==================\", values);\n    const data = {\n      dynamic_data: values\n    };\n    startLoading();\n    EditSectionAPI(section_id, data).then(res => {\n      NotificationManager.success(ERROR_CONST.SUCC_3, \"\", 1000);\n      stopLoading();\n    }).catch(err => {\n      const errorMessage = err && err.response && err.response.data && err.response.data.error;\n\n      if (errorMessage === \"err_8\") {\n        NotificationManager.error(ERROR_CONST.ERROR_8, \"\", 1000);\n      } else if (errorMessage === \"err_9\") {\n        NotificationManager.error(ERROR_CONST.ERROR_9, \"\", 1000);\n      } else {\n        NotificationManager.error(ERROR_CONST.SOMETHING_WRONG, \"\", 1000);\n      }\n\n      stopLoading();\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xl: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page-title-box d-flex align-items-center justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"mb-0\",\n    style: {\n      color: COLOR_CONST.COLOR\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }\n  }, section_type))), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: dynamic_data,\n    validationSchema: AddSectionSchema,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 19\n    }\n  }, ({\n    errors,\n    touched,\n    values,\n    handleChange\n  }) => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }, dynamic_data && Object.keys(dynamic_data).map((dynamic, i) => {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"section_type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 39\n      }\n    }, dynamic), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      value: values[dynamic],\n      name: dynamic,\n      errors: errors,\n      touched: touched,\n      onChange: handleChange,\n      autoComplete: \"off\",\n      className: \"form-control mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 39\n      }\n    }), errors[dynamic] && touched[dynamic] && /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        fontSize: 14\n      },\n      className: \"text-left mt-1 text-danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 41\n      }\n    }, errors[dynamic]))));\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    onSubmit: values => handleSubmit(values),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 27\n    }\n  }, \"Save\")))))))))), /*#__PURE__*/React.createElement(NotificationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Home;","map":{"version":3,"sources":["D:/CODE DATA/diamond/diamond_admin_frontend/src/pages/Section/Home.js"],"names":["React","useState","Row","Container","Col","Card","CardBody","FormGroup","Input","constants","COLOR_CONST","ERROR_CONST","CustomButton","Formik","Form","AddSectionSchema","EditSectionAPI","NotificationContainer","NotificationManager","Spinner","Home","props","section_type","location","state","dynamic_data","section_id","isLoading","setIsLoading","startLoading","stopLoading","handleSubmit","values","console","log","data","then","res","success","SUCC_3","catch","err","errorMessage","response","error","ERROR_8","ERROR_9","SOMETHING_WRONG","color","COLOR","errors","touched","handleChange","Object","keys","map","dynamic","i","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Row,\r\n  Container,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport { constants as COLOR_CONST } from \"../../Constant/index\";\r\nimport { constants as ERROR_CONST } from \"../../Constant/Error&Success\";\r\nimport CustomButton from \"../../components/Custom/Button\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { AddSectionSchema } from \"./AddSectionSchema\";\r\nimport { EditSectionAPI } from \"../../services/AuthService\";\r\nimport {\r\n  NotificationContainer,\r\n  NotificationManager,\r\n} from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Spinner from \"../../components/Common/CustomLoader/loader\";\r\n\r\nconst Home = (props) => {\r\n  const section_type =\r\n    props &&\r\n    props.location &&\r\n    props.location.state &&\r\n    props.location.state.section_type;\r\n  const dynamic_data =\r\n    props &&\r\n    props.location &&\r\n    props.location.state &&\r\n    props.location.state.dynamic_data;\r\n  const section_id =\r\n    props &&\r\n    props.location &&\r\n    props.location.state &&\r\n    props.location.state.section_id;\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const startLoading = () => {\r\n    setIsLoading(true);\r\n  };\r\n\r\n  const stopLoading = () => {\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleSubmit = (values) => {\r\n    console.log(\"values=====handleSubmit==================\", values);\r\n    const data = {\r\n      dynamic_data: values,\r\n    };\r\n\r\n    startLoading();\r\n    EditSectionAPI(section_id, data)\r\n      .then((res) => {\r\n        NotificationManager.success(ERROR_CONST.SUCC_3, \"\", 1000);\r\n        stopLoading();\r\n      })\r\n      .catch((err) => {\r\n        const errorMessage =\r\n          err && err.response && err.response.data && err.response.data.error;\r\n        if (errorMessage === \"err_8\") {\r\n          NotificationManager.error(ERROR_CONST.ERROR_8, \"\", 1000);\r\n        } else if (errorMessage === \"err_9\") {\r\n          NotificationManager.error(ERROR_CONST.ERROR_9, \"\", 1000);\r\n        } else {\r\n          NotificationManager.error(ERROR_CONST.SOMETHING_WRONG, \"\", 1000);\r\n        }\r\n        stopLoading();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        {isLoading && <Spinner />}\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <Col xl={12}>\r\n              <div>\r\n                <div className=\"page-title-box d-flex align-items-center justify-content-between\">\r\n                  <h4 className=\"mb-0\" style={{ color: COLOR_CONST.COLOR }}>\r\n                    {section_type}\r\n                  </h4>\r\n                </div>\r\n              </div>\r\n              <Card>\r\n                <CardBody>\r\n                  <Formik\r\n                    initialValues={dynamic_data}\r\n                    validationSchema={AddSectionSchema}\r\n                    onSubmit={handleSubmit}\r\n                  >\r\n                    {({ errors, touched, values, handleChange }) => (\r\n                      <Form>\r\n                        <Row>\r\n                          {dynamic_data &&\r\n                            Object.keys(dynamic_data).map((dynamic, i) => {\r\n                              return (\r\n                                <React.Fragment key={i}>\r\n                                  <Col md=\"6\">\r\n                                    <FormGroup>\r\n                                      <label htmlFor=\"section_type\">\r\n                                        {dynamic}\r\n                                      </label>\r\n                                      <Input\r\n                                        type=\"text\"\r\n                                        value={values[dynamic]}\r\n                                        name={dynamic}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                        onChange={handleChange}\r\n                                        autoComplete={\"off\"}\r\n                                        className=\"form-control mb-0\"\r\n                                      />\r\n\r\n                                      {errors[dynamic] && touched[dynamic] && (\r\n                                        <div\r\n                                          style={{ fontSize: 14 }}\r\n                                          className=\"text-left mt-1 text-danger\"\r\n                                        >\r\n                                          {errors[dynamic]}\r\n                                        </div>\r\n                                      )}\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </React.Fragment>\r\n                              );\r\n                            })}\r\n                        </Row>\r\n\r\n                        <FormGroup>\r\n                          <CustomButton\r\n                            type=\"submit\"\r\n                            onSubmit={(values) => handleSubmit(values)}\r\n                          >\r\n                            Save\r\n                          </CustomButton>\r\n                        </FormGroup>\r\n                      </Form>\r\n                    )}\r\n                  </Formik>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      <NotificationContainer />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}